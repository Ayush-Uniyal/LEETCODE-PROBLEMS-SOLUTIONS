Intuition
Intuition: In the previous approach we fixed three-pointers and did a binary search to find the fourth. Over here we will fix two-pointers and then find the remaining two elements using two pointer technique as the array will be sorted at first.

Approach
Approach: Sort the array, and then fix two pointers, so the remaining sum will be (target – (nums[i] + nums[j])). Now we can fix two-pointers, one front, and another back, and easily use a two-pointer to find the remaining two numbers of the quad. In order to avoid duplications, we jump the duplicates, because taking duplicates will result in repeating quads. We can easily jump duplicates, by skipping the same elements by running a loop.

Dry-run: In case you want to see the dry run of this approach, please watch the video at the bottom.

Complexity
-Time Complexity: O(n³)
Reason: There are 2 nested loops and the front pointer as well as the right pointer (Third nested loop)

Space Complexity: O(1), (Generally the space complexity that is used to return the answer is ignored)
Code
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>>res;
        if(nums.empty())
        return res;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            long long int target_3=target-nums[i];
            for(int j=i+1;j<n;j++){
                long long int target_2=target_3-nums[j];
            int front=j+1;
            int back=n-1;
            while(front<back){
                long long int two_sum=nums[front]+nums[back];
            if(two_sum<target_2)    front++;
            else if(two_sum>target_2)  back--;
            else{
                vector<int>quadruplet(4,0);
                quadruplet[0]=nums[i];
                quadruplet[1]=nums[j];
                quadruplet[2]=nums[front];
                quadruplet[3]=nums[back];
                res.push_back(quadruplet);
                 while(front<back && nums[front]==quadruplet[2])  ++front;
                 while(front<back && nums[back]==quadruplet[3])  --back;
            }
            }
            while(j+1<n && nums[j+1]==nums[j])  ++j;
            }
while(i+1<n && nums[i+1]==nums[i])     ++i;
            
            }
            return res;
        }
    
}; 
