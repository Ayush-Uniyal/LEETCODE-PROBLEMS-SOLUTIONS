Intuition
.hashset will be used to store elements

Approach
Approach: We will first push all elements in the HashSet. Then we will run a for loop and check for any number(x) if it is the starting number of the consecutive sequence by checking if the HashSet contains (x-1) or not. If ‘x’ is the starting number of the consecutive sequence we will keep searching for the numbers y = x+1, x+2, x+3, ….. And stop at the first ‘y’ which is not present in the HashSet. Using this we can calculate the length of the longest consecutive subsequence.

Complexity
Time Complexity: The time complexity of the above approach is O(N) because we traverse each consecutive subsequence only once. (assuming HashSet takes O(1) to search)

Space complexity: The space complexity of the above approach is O(N) because we are maintaining a HashSet
Code
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int>hashSet;
        for(int num:nums){
        hashSet.insert(num);
    }
    int longestStreak=0;
    for(int num:nums){
    if(!hashSet.count(num-1)){
        int currentNum=num;
        int currentStreak=1;
        while(hashSet.count(currentNum+1)){
            currentNum+=1;
            currentStreak+=1;
        }
        longestStreak=max(longestStreak,currentStreak);}
    }
    return longestStreak;
    }
    
};
